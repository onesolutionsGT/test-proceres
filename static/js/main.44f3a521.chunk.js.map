{"version":3,"sources":["logo.svg","CustomForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomForm","props","state","nombre","correo","telefono","handleInputChange","bind","handleClick","classes","makeStyles","theme","createStyles","root","display","flexWrap","margin","spacing","withoutLabel","marginTop","textField","width","event","target","value","name","this","setState","fetch","proxyUrl","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","CssBaseline","Container","maxWidth","style","backgroundColor","height","padding","Typography","variant","component","FormControl","fullWidth","className","InputLabel","htmlFor","Input","id","onChange","Button","onClick","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44f3a521.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\n\r\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nexport default class CustomForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      nombre: '',\r\n      correo: '',\r\n      telefono: ''\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n\r\n    this.state = {\r\n      classes: makeStyles((theme) =>\r\n        createStyles({\r\n          root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n          },\r\n          margin: {\r\n            margin: theme.spacing(1),\r\n          },\r\n          withoutLabel: {\r\n            marginTop: theme.spacing(3),\r\n          },\r\n          textField: {\r\n            width: 200,\r\n          },\r\n        })\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleClick() {\r\n    let nombre = this.state.nombre;\r\n    let telefono = this.state.telefono;\r\n    let correo = this.state.correo;\r\n\r\n    fetch(proxyUrl + \"https://proceres.com.gt/api/lead\", {\r\n      method: 'post',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        \"CardName\": nombre,\r\n        \"GroupCode\": 100,\r\n        \"Currency\": 'USD',\r\n        \"CODIGOWEB\": \"\",\r\n        \"BRAICES\": \"\",\r\n        \"PROYECTO\": \"Test Proyecto\",\r\n        \"TELEFONO\": telefono,\r\n        \"CORREOELECTRONICO\": correo,\r\n        \"INFORMACION1\": \"\",\r\n        \"INFORMACION2\": \"\",\r\n        \"CONTACTO\": \"\",\r\n        \"INTERES\": \"\",\r\n        \"TIPOP\": \"\",\r\n        \"METROS\": \"\",\r\n        \"DORMITORIOS\": \"\",\r\n        \"MOTIVO\": \"\",\r\n        \"NECESIDAD\": \"\",\r\n        \"VISITA\": \"\",\r\n        \"INFORMACION3\": \"\",\r\n        \"PRESUPUESTO\": \"\",\r\n        \"ZONA\": \"\",\r\n        \"COMPRO\": \"\",\r\n        \"COMENTARIO\": \"\",\r\n        \"SEGUIMIENTO\": \"\",\r\n        \"CONTACTADO\": \"\",\r\n        \"FECHA1\": \"\",\r\n        \"CREADOR\": \"\",\r\n        \"FECHA2\": \"\",\r\n        \"ACTUALIZADO\": \"\",\r\n        \"FECHA3\": \"\",\r\n        \"LISTACONTACTO\": \"\",\r\n        \"ESTATUS\": \"\",\r\n        \"TIPOCONTACTO\": \"\",\r\n        \"PERTENECE\": \"\"\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then((data) => console.log(data))\r\n      .catch(console.log)\r\n      ;\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <CssBaseline />\r\n        <Container maxWidth=\"sm\" style={{ backgroundColor: '#fff', height: '100vh', padding: '25px' }}>\r\n          <Typography variant=\"h2\" component=\"h2\">\r\n            Formulario Proceres\r\n          </Typography>\r\n          <FormControl fullWidth className={this.state.classes.margin, this.state.classes.textField} style={{ backgroundColor: '#F9F9F9' }}>\r\n            <InputLabel htmlFor=\"txtNombre\">Nombre</InputLabel>\r\n            <Input id=\"txtNombre\" name=\"nombre\" value={this.state.nombre || ''} onChange={this.handleInputChange} />\r\n          </FormControl>\r\n          <br></br>\r\n          <br></br>\r\n          <FormControl fullWidth className={this.state.classes.margin, this.state.classes.textField} style={{ backgroundColor: '#F9F9F9' }}>\r\n            <InputLabel htmlFor=\"txtCorreo\" >Correo</InputLabel>\r\n            <Input id=\"txtCorreo\" name=\"correo\" value={this.state.correo || ''} onChange={this.handleInputChange} />\r\n          </FormControl>\r\n          <br></br>\r\n          <br></br>\r\n          <FormControl fullWidth className={this.state.classes.margin, this.state.classes.textField} style={{ backgroundColor: '#F9F9F9' }}>\r\n            <InputLabel htmlFor=\"txtTelefono\"  >Tel√©fono</InputLabel>\r\n            <Input id=\"txtTelefono\" name=\"telefono\" value={this.state.telefono || ''} onChange={this.handleInputChange} />\r\n          </FormControl>\r\n          <br></br>\r\n          <br></br>\r\n          <Button onClick={this.handleClick} color=\"primary\">Creame un Cliente</Button>\r\n        </Container>\r\n      </>\r\n    )\r\n  }\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CustomForm from './CustomForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n   \n      <CustomForm></CustomForm>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}